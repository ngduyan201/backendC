import jwt from 'jsonwebtoken';
import User from '../models/User.js';

// H√†m t·∫°o token
const generateTokens = (userId) => {
  const accessToken = jwt.sign(
    { _id: userId },
    process.env.JWT_SECRET,
    { expiresIn: '15m' } // Access token h·∫øt h·∫°n sau 15 ph√∫t
  );

  const refreshToken = jwt.sign(
    { _id: userId },
    process.env.REFRESH_TOKEN_SECRET,
    { expiresIn: '7d' } // Refresh token h·∫øt h·∫°n sau 7 ng√†y
  );

  return { accessToken, refreshToken };
};

// H√†m login
export const login = async (req, res) => {
  try {
    const { username, password } = req.body;

    // Validate input
    if (!username || !password) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin'
      });
    }

    // T√¨m user v√† include password field
    const user = await User.findOne({ username }).select('+password');
    if (!user) {
      return res.status(401).json({
        success: false,
        message: 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i'
      });
    }

    // Ki·ªÉm tra password
    const isMatch = await user.comparePassword(password);
    if (!isMatch) {
      return res.status(401).json({
        success: false,
        message: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng'
      });
    }

    // T·∫°o tokens
    const { accessToken, refreshToken } = generateTokens(user._id);

    // L∆∞u refresh token v√†o cookie
    res.cookie('refreshToken', refreshToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      maxAge: 7 * 24 * 60 * 60 * 1000 // 7 ng√†y
    });

    // Tr·∫£ v·ªÅ response v·ªõi access token
    return res.status(200).json({
      success: true,
      accessToken,
      user: {
        _id: user._id,
        username: user.username
      }
    });

  } catch (error) {
    console.error('Login error:', error);
    return res.status(500).json({
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i'
    });
  }
};

// H√†m refresh token
export const refreshToken = async (req, res) => {
  console.log('üîÑ Processing refresh token request...');
  try {
    const { refreshToken } = req.cookies;

    if (!refreshToken) {
      console.log('‚ùå No refresh token found in cookies');
      return res.status(401).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y refresh token'
      });
    }

    console.log('üîç Verifying refresh token...');
    const decoded = jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET);
    
    console.log('üîç Finding user...');
    const user = await User.findById(decoded._id);
    if (!user) {
      console.log('‚ùå User not found');
      return res.status(401).json({
        success: false,
        message: 'User kh√¥ng t·ªìn t·∫°i'
      });
    }

    console.log('‚úÖ Generating new access token...');
    const accessToken = jwt.sign(
      { _id: user._id },
      process.env.JWT_SECRET,
      { expiresIn: '15m' }
    );

    console.log('‚úÖ Refresh token process completed successfully');
    return res.json({
      success: true,
      accessToken,
      user: {
        _id: user._id,
        username: user.username
      }
    });

  } catch (error) {
    console.error('üö´ Refresh token error:', error);
    return res.status(401).json({
      success: false,
      message: 'Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n'
    });
  }
};

// H√†m logout
export const logout = async (req, res) => {
  try {
    const userId = req.user._id;

    // 1. X√≥a refreshToken trong database
    await User.findByIdAndUpdate(userId, {
      $unset: { refreshToken: 1 }
    });

    // 2. X√≥a HTTP-only cookie
    res.clearCookie('refreshToken', {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      path: '/'
    });

    res.json({
      success: true,
      message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng'
    });

  } catch (error) {
    console.error('Logout error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi ƒëƒÉng xu·∫•t'
    });
  }
};

export const register = async (req, res) => {
  try {
    const { username, email, password } = req.body;

    // Validate input
    if (!username || !email || !password) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin'
      });
    }

    // Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(400).json({
        success: false,
        message: 'T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i'
      });
    }

    // T·∫°o user m·ªõi
    const user = await User.create({
      username,
      email,
      password
    });

    return res.status(201).json({
      success: true,
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
      user: {
        _id: user._id,
        username: user.username,
        email: user.email
      }
    });

  } catch (error) {
    console.error('Register error:', error);
    return res.status(500).json({
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng k√Ω'
    });
  }
};

export const changePassword = async (req, res) => {
  try {
    const { oldPassword, newPassword } = req.body;
    const userId = req.user.id; // L·∫•y t·ª´ JWT trong cookie

    // Ki·ªÉm tra user t·ªìn t·∫°i
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng'
      });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
    const isValidPassword = await bcrypt.compare(oldPassword, user.password);
    if (!isValidPassword) {
      return res.status(401).json({
        success: false,
        message: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng'
      });
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    const hashedNewPassword = await bcrypt.hash(newPassword, 10);
    
    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
    user.password = hashedNewPassword;
    await user.save();

    // T·∫°o token m·ªõi
    const newToken = generateToken(user);
    
    // Thi·∫øt l·∫≠p cookie m·ªõi
    res.cookie('token', newToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      maxAge: 7 * 24 * 60 * 60 * 1000 // 7 ng√†y
    });

    return res.json({
      success: true,
      message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng'
    });

  } catch (error) {
    console.error('Change password error:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server khi ƒë·ªïi m·∫≠t kh·∫©u'
    });
  }
};
